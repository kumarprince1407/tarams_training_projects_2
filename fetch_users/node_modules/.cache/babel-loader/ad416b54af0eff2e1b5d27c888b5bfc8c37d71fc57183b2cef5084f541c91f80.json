{"ast":null,"code":"//actions.js\n\nimport axios from \"axios\";\nimport {\n//Importing action types from userTypes\nFETCH_USERS_FAILURE, FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS } from \"./userTypes\";\n\n//Action creators\n//This action signals that a user fetch operation has started, typically used to set a loading state in the reducer\nexport const fetchUsersRequest = () => {\n  return {\n    type: FETCH_USERS_REQUEST\n  };\n};\n\n//The users\nexport const fetchUsersSuccess = users => {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: users //payload is the list of users that is present as a parameter\n  };\n};\nexport const fetchUsersFailure = error => {\n  return {\n    type: FETCH_USERS_FAILURE,\n    payload: error\n  };\n};\nexport const fetchUsers = () => {\n  return dispatch => {\n    dispatch(fetchUsersRequest); //Dispatch action to indicate request has started. This will set loading to 'true'\n    axios.get(\"https://jsonplaceholder.typicode.com/users\").then(response => {\n      const users = response.data; //Extract users from API response\n      dispatch(fetchUsersSuccess(users)); //Dispatch success action(fetchusersSuccess) with 'users' as an argument\n    }).catch(error => {\n      const errorMsg = error.message;\n      dispatch(fetchUsersFailure(errorMsg)); //Dispatch failure action with an error message\n    });\n  };\n};","map":{"version":3,"names":["axios","FETCH_USERS_FAILURE","FETCH_USERS_REQUEST","FETCH_USERS_SUCCESS","fetchUsersRequest","type","fetchUsersSuccess","users","payload","fetchUsersFailure","error","fetchUsers","dispatch","get","then","response","data","catch","errorMsg","message"],"sources":["/home/princekumar/Desktop/Tarams/Practice/fetch_users/src/redux/actions.js"],"sourcesContent":["//actions.js\n\nimport axios from \"axios\";\nimport {\n  //Importing action types from userTypes\n  FETCH_USERS_FAILURE,\n  FETCH_USERS_REQUEST,\n  FETCH_USERS_SUCCESS,\n} from \"./userTypes\";\n\n//Action creators\n//This action signals that a user fetch operation has started, typically used to set a loading state in the reducer\nexport const fetchUsersRequest = () => {\n  return {\n    type: FETCH_USERS_REQUEST,\n  };\n};\n\n//The users\nexport const fetchUsersSuccess = (users) => {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: users, //payload is the list of users that is present as a parameter\n  };\n};\n\nexport const fetchUsersFailure = (error) => {\n  return {\n    type: FETCH_USERS_FAILURE,\n    payload: error,\n  };\n};\n\nexport const fetchUsers = () => {\n  return (dispatch) => {\n    dispatch(fetchUsersRequest); //Dispatch action to indicate request has started. This will set loading to 'true'\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        const users = response.data; //Extract users from API response\n        dispatch(fetchUsersSuccess(users)); //Dispatch success action(fetchusersSuccess) with 'users' as an argument\n      })\n      .catch((error) => {\n        const errorMsg = error.message;\n        dispatch(fetchUsersFailure(errorMsg)); //Dispatch failure action with an error message\n      });\n  };\n};\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACE;AACAC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,QACd,aAAa;;AAEpB;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACrC,OAAO;IACLC,IAAI,EAAEH;EACR,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMI,iBAAiB,GAAIC,KAAK,IAAK;EAC1C,OAAO;IACLF,IAAI,EAAEF,mBAAmB;IACzBK,OAAO,EAAED,KAAK,CAAE;EAClB,CAAC;AACH,CAAC;AAED,OAAO,MAAME,iBAAiB,GAAIC,KAAK,IAAK;EAC1C,OAAO;IACLL,IAAI,EAAEJ,mBAAmB;IACzBO,OAAO,EAAEE;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B,OAAQC,QAAQ,IAAK;IACnBA,QAAQ,CAACR,iBAAiB,CAAC,CAAC,CAAC;IAC7BJ,KAAK,CACFa,GAAG,CAAC,4CAA4C,CAAC,CACjDC,IAAI,CAAEC,QAAQ,IAAK;MAClB,MAAMR,KAAK,GAAGQ,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC7BJ,QAAQ,CAACN,iBAAiB,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,CACDU,KAAK,CAAEP,KAAK,IAAK;MAChB,MAAMQ,QAAQ,GAAGR,KAAK,CAACS,OAAO;MAC9BP,QAAQ,CAACH,iBAAiB,CAACS,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC;EACN,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}